import React, { useState, useEffect, useRef } from 'react'; 
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { Loader2, Zap } from 'lucide-react'; // ‡∏•‡∏ö Volume2 ‡∏≠‡∏≠‡∏Å
import Footer from '../components/Footer';

interface Option {
  text: string;
  _id: string;
}

interface Question {
  _id: string;
  questionText: string;
  options: Option[];
}

interface UserAnswer {
  questionId: string;
  selectedOptionId: string;
}

const QuizPage: React.FC = () => {
  const navigate = useNavigate();
  const [questions, setQuestions] = useState<Question[]>([]);
  const [answers, setAnswers] = useState<Map<string, string>>(new Map());
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const API_URL = import.meta.env.VITE_API_URL;
  
  const audioRef = useRef<HTMLAudioElement | null>(null);


  // --- useEffect: ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ ---
  useEffect(() => {
    const audio = audioRef.current;
    
    if (audio) {
      audio.loop = true;
      audio.volume = 0.2; 
      
      // ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ attribute autoplay ‡πÉ‡∏ô JSX ‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö autoplay)
      audio.muted = false; 
    }

    // Cleanup: ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ (‡∏à‡∏ö‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
    return () => {
      if (audio) {
        audio.pause();
        audio.currentTime = 0;
      }
    };
  }, []); 


  // --- useEffect: ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å Backend ---
  useEffect(() => {
    const fetchQuestions = async () => {
      try {
        const response = await axios.get<Question[]>(`${API_URL}/questions`);
        setQuestions(response.data);
        setIsLoading(false);
      } catch (err) {
        console.error("Error fetching questions:", err);
        setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Server Backend.');
        setIsLoading(false);
      }
    };

    fetchQuestions();
  }, []);

  // --- Handler: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ---
  const handleAnswer = (questionId: string, optionId: string) => {
    setAnswers(prevAnswers => {
      const newAnswers = new Map(prevAnswers);
      newAnswers.set(questionId, optionId);
      return newAnswers;
    });
    
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
    if (currentQuestionIndex < questions.length - 1) {
        setTimeout(() => {
            setCurrentQuestionIndex(prev => prev + 1);
        }, 150); // ‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
    }
  };

  // --- Handler: ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---
  const handleSubmit = async () => {
    if (answers.size !== questions.length) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå!');
      return;
    }

    const submissionData: UserAnswer[] = Array.from(answers).map(([questionId, selectedOptionId]) => ({
      questionId,
      selectedOptionId,
    }));
    
    setIsLoading(true);
    
    try {
      const response = await axios.post(`${API_URL}/submit`, { 
        answers: submissionData 
      });

      // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Server
      navigate('/result', { state: { finalResult: response.data } });

    } catch (err) {
      console.error("Submission Error:", err);
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      setIsLoading(false);
    }
  };


  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <Loader2 className="w-10 h-10 animate-spin text-pink-500" />
        <p className="ml-3 text-lg text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-red-50">
        <p className="text-xl text-red-600 font-semibold">{error}</p>
      </div>
    );
  }

  if (questions.length === 0) {
       return (
         <div className="min-h-screen flex items-center justify-center bg-yellow-50">
             <p className="text-xl text-yellow-700 font-semibold">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Seeding Data ‡∏ó‡∏µ‡πà Backend ‡∏Å‡πà‡∏≠‡∏ô</p>
         </div>
     );
  }

  const currentQuestion = questions[currentQuestionIndex];
  const isLastQuestion = currentQuestionIndex === questions.length - 1;
  const isAnswered = answers.has(currentQuestion._id);

  return (
    <div className="min-h-screen bg-pink-50 flex flex-col items-center p-8 pb-20">
      
      {/* 1. Audio Element: ‡πÉ‡∏ä‡πâ attribute 'autoplay' ‡πÅ‡∏•‡∏∞ 'hidden' (‡πÅ‡∏ó‡∏ô controls) */}
      <audio ref={audioRef} src="/bg-music.mp3" preload="auto" autoPlay loop className="hidden" /> 

      {/* Header/Progress */}
      <div className="w-full max-w-xl text-center mb-6">
        <h2 className="text-3xl font-bold text-pink-700 flex items-center justify-center mb-2">
          <Zap className="w-6 h-6 mr-2 text-pink-500" />
          ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì
        </h2>
        <p className="text-gray-600">
          ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà {currentQuestionIndex + 1} / {questions.length} 
        </p>
        
        {/* Progress Bar (Tailwind) */}
        <div className="w-full bg-pink-200 rounded-full h-2.5 mt-2">
          <div 
            className="bg-pink-500 h-2.5 rounded-full transition-all duration-500" 
            style={{ width: `${((currentQuestionIndex + 1) / questions.length) * 100}%` }}
          ></div>
        </div>
      </div>

      {/* Question Card */}
      {currentQuestion && (
        <div className="w-full max-w-xl bg-white p-8 rounded-xl shadow-2xl border border-pink-100">
          
          {/* Question Text */}
          <p className="text-xl font-semibold text-gray-800 mb-6">
            {currentQuestionIndex + 1}. {currentQuestion.questionText}
          </p>
          
          {/* Options */}
          <div className="space-y-4">
            {currentQuestion.options.map((option) => {
              const isSelected = answers.get(currentQuestion._id) === option._id;
              const questionIsAnswered = answers.has(currentQuestion._id);

              return (
                <button
                  key={option._id}
                  onClick={!questionIsAnswered ? () => handleAnswer(currentQuestion._id, option._id) : undefined}
                  disabled={questionIsAnswered}
                  className={`w-full text-left py-3 px-5 rounded-lg transition-all duration-200 focus:outline-none 
                    ${isSelected 
                      ? 'bg-pink-500 text-white shadow-md transform scale-[1.01]' 
                      : questionIsAnswered 
                        ? 'bg-gray-100 text-gray-400 cursor-not-allowed border border-gray-200'
                        : 'bg-gray-100 text-gray-700 hover:bg-pink-100 border border-gray-200'
                    }`}
                >
                  {option.text}
                </button>
              );
            })}
          </div>
          
          {/* Navigation Buttons */}
          <div className="flex justify-end mt-8 pt-4 border-t border-gray-100">
            {isLastQuestion ? (
              <button
                onClick={handleSubmit}
                disabled={!isAnswered}
                className={`py-2 px-6 rounded-full font-bold transition duration-300 
                  ${isAnswered
                    ? 'bg-green-500 text-white shadow-lg hover:bg-green-600 transform scale-105'
                    : 'bg-gray-300 text-gray-600 cursor-not-allowed'
                  }`
                }
              >
                ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå! üíå
              </button>
            ) : (
                <p className="py-2 px-4 rounded-full font-semibold text-pink-600 bg-pink-100">
                    ‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß: ‡πÑ‡∏õ‡∏Ç‡πâ‡∏≠‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                </p>
            )}

            
          </div>
          <br />

          <p>
              ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏û‡∏•‡∏á: ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏â‡∏±‡∏ô‡πÄ‡∏≠‡∏á (me.)- PURPEECH Official
            </p>
        </div>

        
      )}
      <Footer />

    </div>
  );
};

export default QuizPage;
